<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN"
"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
<svg xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink" >
  <script type="text/javascript">
    <![CDATA[
      var timer_active = false; 
      var t;
      var warning_timer;
      var radius = 300;
      var topleftspacing = 100;
      var current_phase = -1;
	  var saved_timestamp;
	  var saved_ticks;
      var phases = new Array();
      
      window.onload=function() {
        phases.push(new Phase("The Opponent challenges the Reporter for the problem", 60 , false));
        phases.push(new Phase("The Reporter accepts or rejects the challenge", 60 , false));
        phases.push(new Phase("Preparation of the Reporter", 300 , false));
        phases.push(new Phase("Presentation of the report", 720 , false));
        phases.push(new Phase("Questions of the Opponent to the Reporter and answers of the Reporter", 120 , false));
        phases.push(new Phase("Preparation of the Opponent", 180 , false));
        phases.push(new Phase("The Opponent takes the floor", 240 , false));
        phases.push(new Phase("Discussion between the Reporter and the Opponent", 600 , true));
        phases.push(new Phase("The Opponent summarizes the discussion", 60 , false));
        phases.push(new Phase("Questions of the Reviewer to the Reporter and the Opponent and answers to the questions", 180 , false));
        phases.push(new Phase("Preparation of the Reviewer", 120 , false));
        phases.push(new Phase("The Reviewer takes the floor", 240 , false));
        phases.push(new Phase("Concluding remarks of the Reporter", 120 , false));
        phases.push(new Phase("Questions of the Jury", 300 , false));
        phases.push(new Phase("PAUSE", 600 , false));
      }      
      
      function Phase (name, duration, linked) {
        this.name = name;
        this.duration = duration;
        this.linked_offset = 0;
        this.linked = linked;
        this.current_time = 0;
      }
      
      function clearWarningLabel () {
        document.getElementById('warninglabel').firstChild.nodeValue = " ";
      }
	  
	  function updateSavedTime() {
	    saved_timestamp = Math.floor((new Date().getTime())/1000);
		saved_ticks = phases[current_phase].current_time;
	  }
      
	  function checkSavedTime () {
	    var now = Math.floor((new Date().getTime())/1000);
	    if ((now - saved_timestamp) - (phases[current_phase].current_time - saved_ticks) > 1) {
          phases[current_phase].current_time = saved_ticks + (now - saved_timestamp);
        }		
	  }
	  
      function nextPhase () {
        if (current_phase + 1 >= phases.length) {
          document.getElementById('warninglabel').firstChild.nodeValue = "The current phase is already the last phase. There is no next phase.";
          clearTimeout(warning_timer);
          warning_timer = setTimeout(clearWarningLabel, 5000);
        }
        else {
          current_phase++;
          document.getElementById('phaselabel').firstChild.nodeValue = phases[current_phase].name;
		  updateSavedTime();
          updateLinkedOffset();
          resetColors();
          draw();
        }
      }
      
      function previousPhase () {
        if (current_phase - 1 < 0) {
          document.getElementById('warninglabel').firstChild.nodeValue = "The current phase is already the first phase. There is no previous phase.";
          clearTimeout(warning_timer);
          warning_timer = setTimeout(clearWarningLabel, 5000);
        }
        else {
          current_phase--;
          document.getElementById('phaselabel').firstChild.nodeValue = phases[current_phase].name;
          updateLinkedOffset();
		  updateSavedTime();
          resetColors();
          draw();
        }
      }
      
      function resetPhase () {
        if(current_phase >= 0) {
          phases[current_phase].current_time = 0;
		  updateSavedTime();
		  resetColors();
          draw();
        }
      }
      
      function updateLinkedOffset () {
        if (phases[current_phase].linked && current_phase > 0) {
          var offset = phases[current_phase-1].duration + phases[current_phase-1].linked_offset - phases[current_phase-1].current_time;
          phases[current_phase].linked_offset = (offset > 0) ? offset : 0;
        }
      }
      
      function resetColors () {
        if (phases[current_phase].current_time < phases[current_phase].duration + phases[current_phase].linked_offset) {
          document.getElementById('background').setAttributeNS(null,"fill","#EEEEEE");
          document.getElementById('foreground').setAttributeNS(null,"fill","blue");
        }
        else {
          document.getElementById('background').setAttributeNS(null,"fill","red");
          document.getElementById('foreground').setAttributeNS(null,"fill","purple");
        }
      }
      
      function startstop () {
        if (current_phase < 0) {
          nextPhase();
        }
        
        timer_active = !timer_active;
        if (timer_active) {
		  updateSavedTime();
          t = setTimeout("tick()", 1000);
          document.getElementById('startstop_button_text').firstChild.nodeValue = "Pause";
        }
        else {
          clearTimeout(t);
          document.getElementById('startstop_button_text').firstChild.nodeValue = "Start Clock";
        }        
      }

      function tick () {
        phases[current_phase].current_time++; 
		checkSavedTime();
        draw();
        if (timer_active) {
          t = setTimeout("tick()", 1000);
        }
      }
      
      function draw () {
        var total_time = phases[current_phase].duration + phases[current_phase].linked_offset;
        var time_string = toMinutesSeconds(phases[current_phase].current_time) + " of " + toMinutesSeconds(total_time);
        document.getElementById('timedisplay').firstChild.nodeValue = time_string;
        var arc = document.getElementById('foreground');
        var center = "M" + (radius+topleftspacing) + "," + (radius+topleftspacing);
        var startpoint = "v-" + radius;
        var arcradius = "a"+radius+","+radius+" ";
        var largeflag = "0 ";
        if (phases[current_phase].current_time % total_time > total_time / 2) {
          largeflag = "1 ";
        }
        var sweepflag = "1 ";
        var angle = 2*Math.PI*(phases[current_phase].current_time % total_time) / total_time; 
        var stopx = Math.sin(angle)*radius;
        var stopy = -Math.cos(angle)*radius+300;
        var stoppoint = stopx + "," + stopy + " ";
        var pathdescription = center + startpoint + arcradius + "0 " + largeflag + sweepflag + stoppoint + "z";
        arc.setAttributeNS(null,"d",pathdescription);
        if (phases[current_phase].current_time >= total_time*0.75) {
          arc.setAttributeNS(null,"fill", "yellow"); 
        }
		if (phases[current_phase].current_time >= total_time - 15) {
          arc.setAttributeNS(null,"fill", "red"); 
        }
        if (phases[current_phase].current_time >= total_time) {
          arc.setAttributeNS(null, "fill", "purple");
          document.getElementById('background').setAttributeNS(null,"fill","red");
        }
      }

      function toMinutesSeconds (sec) {
        var minutes = Math.floor(sec / 60);
        var seconds = sec % 60;
        var minutes_string = (minutes < 10) ? "0"+minutes : minutes.toString();
        var seconds_string = (seconds < 10) ? "0"+seconds : seconds.toString();
        return (minutes_string + ":" + seconds_string);
      }

    // Copied from http://www.openjs.com/scripts/events/exit_confirmation.php
    function goodbye(e) {
    if(!e) e = window.event;
  //e.cancelBubble is supported by IE - this will kill the bubbling process.
  e.cancelBubble = true;
  e.returnValue = 'You sure you want to leave?'; //This is displayed on the dialog

  //e.stopPropagation works in Firefox.
  if (e.stopPropagation) {
    e.stopPropagation();
    e.preventDefault();
  }
}
window.onbeforeunload=goodbye;
    ]]>
  </script>
  <defs>
    <linearGradient id="button_surface" gradientUnits="objectBoundingBox"
      x1="1" x2="1" y1="0" y2="1">
      <stop stop-color="#00a" offset="0"/>
      <stop stop-color="#000" offset="0.67"/>
    </linearGradient>

    <linearGradient id="virtual_light" gradientUnits="objectBoundingBox"
      x1="0" x2="0" y1="0" y2="1">
      <stop stop-color="#eef" offset="0" stop-opacity="1"/>
      <stop stop-color="#449" offset="0.4" stop-opacity="0.5"/>
    </linearGradient>
  </defs>
  <circle id="background" cx="400" cy="400" r="300" stroke="black" stroke-width="1" fill="#EEEEEE"  onclick="startstop()"/>
  <path id="foreground" d = "M400,400 v-300 a300,300 0 1,1 0,0 z" fill="blue" onclick="startstop()" />
  <text id="timedisplay" x="70" y="80" style="font-family:Tahoma; font-size: 65pt; font-weight: bold;"> </text>
  <text id="phaselabel" x="50" y="750" style="font-family:Tahoma; font-size: 15pt; font-weight: bold;">Clock is reset and ready!</text>
  <text x="50" y="770" style="font-family:Tahoma; font-size: 8pt; font-weight: bold; fill: #ccc;"> This work is &#169; 2012 Georg Hofferek and Timotheus Hell: licensed under a <a style="font-family:Tahoma; font-size: 8pt; font-weight: bold; fill: #ccc;" xlink:href="http://creativecommons.org/licenses/by-nc-sa/3.0/">Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License</a>.</text>
  <text x="50" y="785" style="font-family:Tahoma; font-size: 8pt; font-weight: bold; fill: #ccc;">Revision 17, report bugs to <a style="font-family:Tahoma; font-size: 8pt; font-weight: bold; fill: #ccc;" xlink:href="mailto:georg.hofferek@gmx.net">georg.hofferek@gmx.net</a></text>
  <text id="warninglabel" x="50" y="725" style="font-family:Tahoma; font-size: 15pt; font-weight: bold; fill: red;"> </text>

  <style type="text/css">
  g.button:hover{
    opacity: 0.90;
  }
</style>
<g class="button" cursor="pointer"
   onmouseup="startstop()">
  <rect class="button" cursor="pointer" x="810" y="110" rx="15"
ry="15" width="150" height="60"
    fill="url(#button_surface)" stroke="#ffffff"/>
   <rect x="812" y="112" rx="15" ry="15" width="146" height="56"
    fill="url(#virtual_light)" stroke="#FFFFFF" stroke-opacity="0.4"/>
  <text id="startstop_button_text" x="830" y="145" fill="white"
    font-family="Tahoma" font-size="16" font-weight="500">
    Start Clock
  </text>
</g>

<g class="button" cursor="pointer"
   onmouseup="resetPhase()">
  <rect class="button" cursor="pointer" x="810" y="210" rx="15"
ry="15" width="150" height="60"
    fill="url(#button_surface)" stroke="#ffffff"/>
    <rect x="812" y="212" rx="15" ry="15" width="146" height="56"
    fill="url(#virtual_light)" stroke="#FFFFFF" stroke-opacity="0.4"/>
  <text x="830" y="245" fill="white"
    font-family="Tahoma" font-size="16" font-weight="500">
    Reset Phase
  </text>
</g>

<g class="button" cursor="pointer"
   onmouseup="previousPhase()">
  <rect class="button" cursor="pointer" x="810" y="310" rx="15"
ry="15" width="150" height="60"
    fill="url(#button_surface)" stroke="#ffffff"/>
    <rect x="812" y="312" rx="15" ry="15" width="146" height="56"
    fill="url(#virtual_light)" stroke="#FFFFFF" stroke-opacity="0.4"/>
  <text x="830" y="345" fill="white"
    font-family="Tahoma" font-size="16" font-weight="500">
    Previous Phase
  </text>

</g>

<g class="button" cursor="pointer"
   onmouseup="nextPhase()">
  <rect class="button" cursor="pointer" x="810" y="410" rx="15"
ry="15" width="150" height="60"
    fill="url(#button_surface)" stroke="#ffffff"/>
	  <rect x="812" y="412" rx="15" ry="15" width="146" height="56"
    fill="url(#virtual_light)" stroke="#FFFFFF" stroke-opacity="0.4"/>
  <text x="830" y="445" fill="white"
    font-family="Tahoma" font-size="16" font-weight="500">
    Next Phase
  </text>
</g>
</svg>
